"use client";

import "./globals.scss";

import { usePathname } from "next/navigation";

import { Provider } from "react-redux";

import {
  ApolloClient,
  InMemoryCache,
  ApolloProvider,
  HttpLink,
  gql,
  from,
  Observable,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";

import { onError } from "@apollo/client/link/error";

import UserInfo from "@/components/Layout/UserInfo/UserInfo";
import Navigation from "@/components/Layout/Navigation/Navigation";

import { store } from "@/redux/store";
import AuthProvider from "@/provider/AuthProvider";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
const httpLink = new HttpLink({
  uri: "http://localhost:8080/graphql",
  credentials: "include",
});

const authLink = setContext((_, { headers }) => {
  const token = localStorage.getItem("token");
  return {
    headers: {
      ...headers,
      Authorization: token ? `Bearer ${token}` : "",
    },
  };
});

const getNewToken = async () => {
  const newToken = () =>
    client.mutate({
      mutation: gql`
        mutation refresh {
          refresh {
            accessToken
          }
        }
      `,
    });
  try {
    const { data } = await newToken();
    localStorage.setItem("token", data.refresh.accessToken);
    return data.refresh.accessToken;
  } catch (error) {}
};

const errorLink = onError(({ graphQLErrors, operation, forward }) => {
  if (graphQLErrors) {
    for (let err of graphQLErrors) {
      if (err.extensions.code === "UNAUTHENTICATED") {
        return new Observable((observer) => {
          getNewToken()
            .then((accessToken) => {
              operation.setContext(({ headers = {} }) => ({
                headers: {
                  // Re-add old headers
                  ...headers,
                  // Switch out old access token for new one
                  authorization: `Bearer ${accessToken}` || null,
                },
              }));
            })
            .then(() => {
              const subscriber = {
                next: observer.next.bind(observer),
                error: observer.error.bind(observer),
                complete: observer.complete.bind(observer),
              };
              // Retry last failed request
              forward(operation).subscribe(subscriber);
            })
            .catch((error) => {
              // No refresh or client token available, we force user to login
              observer.error(error);
            });
        });
        //     .catch((error) => {
        //       return;
        //     })
        //     .then((data) => {
        //       const oldHeaders = operation.getContext().headers;
        //       console.log("ОЛД ХЕДЕР", oldHeaders, data);

        //       operation.setContext({
        //         headers: {
        //           ...oldHeaders,
        //           Authorization: `Bearer ${data}`,
        //         },
        //       });
        //       return forward(operation);
        //     })
        // ).flatMap((data) => {
        //   const oldHeaders = operation.getContext().headers;
        //   console.log("ОЛД ХЕДЕР", oldHeaders, data);

        //   operation.setContext({
        //     headers: {
        //       ...oldHeaders,
        //       Authorization: `Bearer ${data}`,
        //     },
        //   });
        //   return forward(operation);
        // });
      }
    }
  }
});

const client = new ApolloClient({
  cache: new InMemoryCache(),
  link: from([authLink, errorLink, httpLink]),
  connectToDevTools: true,
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();

  return (
    <html lang="en">
      <Provider store={store}>
        <AuthProvider>
          <ApolloProvider client={client}>
            <body
              className={
                pathname === "/auth" || pathname === "/auth/genres"
                  ? "flex items-center justify-center h-screen"
                  : ""
              }>
              {pathname === "/auth" || pathname === "/auth/genres" ? (
                children
              ) : (
                <div className="layout container relative">
                  <div className="aside fixed top-6 ">
                    <UserInfo />
                    <Navigation />
                  </div>
                  <div className="main">{children}</div>
                </div>
              )}
            </body>
          </ApolloProvider>
        </AuthProvider>
      </Provider>
    </html>
  );
}
